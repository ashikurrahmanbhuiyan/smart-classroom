<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard</title>
    <link rel="stylesheet" href="/dashboard/student_dashboard_style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" xintegrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="wrapper">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="student-profile">
                
                <div class="profile-picture">
                    <%if(student_user.picture){%>
                        <img src="/studentPics/<%=student_user.picture%>" alt="Theacher phto">
                        <% } else{ %>
                            <img src="/img/default.jpg" alt="Theacher phto">
                            <% } %>
                </div>
            
                <h2 class="profile-name" id="studentName"><%= student_user.name %></h2>
                <p class="profile-roll" id="studentRoll"><%= student_user.student_id %></p>
                

                <button id="picButton" type="submit" style="color: rgb(47, 127, 127); border: none; border-radius: 10;">Edit photo</button>
                <div id="picForm" style="display: none;" class="pic-form">
                    <form id="edit-form" class = "inner-form" method="post" action="/student/update-profile-pic" enctype="multipart/form-data">
                        <input class = "file-input" type="file" name="updateProfilePic">
                        <input type="hidden" name="email" value=<%=student_user.email%> >
                        <button id="picSubmit" class="upload-button" type="submit">Upload</button>
                    </form>
                </div>

            </div>

            <nav class="sidebar-nav">
                <a href="#" class="menu-item active" id ="dashboard">
                    <i class="fas fa-chart-line"></i> Dashboard
                </a>
                <a href="#" class="menu-item" id = "enrollment">
                    <i class="fas fa-book"></i> Course Enrollment
                </a>
                <div class="d-flex justify-content-center">
                    <a href="/student/logout" class="btn btn-danger align-items-center">
                        <i class="fas fa-sign-out-alt"></i> Sign out
                    </a>
                </div>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="dashboard-header">
                <h1 id="mainHeader">Dashboard Overview</h1>
            </div>

            <!-- Dashboard Section -->
            <section id="dashboard-section" style="display: block;" class="active-section">
                <div class="row">
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="dashboard-metric-box">
                            <i class="fas fa-layer-group icon mb-3"></i>
                            <h3 id="totalEnrolledCourses"> <%= student_user.enrolled_courses.length %> </h3>
                            <p>Total Enrolled Courses</p>
                        </div>
                    </div>
                    <!-- New Running Semester Box -->
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="dashboard-metric-box running-semester">
                            <i class="fas fa-calendar-alt icon mb-3"></i>
                            <h3>Fall 2023</h3>
                            <p>Running Semester</p>
                        </div>
                    </div>
                </div>
                <!-- Ennnrolled courses has beeb shown here -->
                <div class="info-card" id = "enrolled-course">
                    <h4 class="card-title">My Enrolled Courses</h4>
                    <div class="row">
                        <% if(student_user.enrolled_courses.length == 0){ %>
                                <div class="col-12 text-center text-muted py-4">No course enrolled</div> 
                                <% } else{ %>
                                <% student_user.enrolled_courses.forEach(course=>{ %>
                                <div class = "col-lg-6 col-md-12 mb-4">
                                    <div class="course-item item-course">
                                        <div class="course-item-info">
                                            <h5><%= course.course_name %></h5>
                                            <p><%= course.teacher_name %></p>
                                        </div>
                                        <div class="progress-circle">
                                            <div class="bar"></div>
                                            <div class="fill"></div>
                                            <div class="inner-circle">85</div>
                                        </div>
                                    </div>
                                </div>
                            <% });} %>
                    </div>
                </div>
            </section>

            <!-- Course Enrollment Section -->
            <section id="enrollment-section" style="display:none;">
                <div class="info-card">
                    <h4 class="card-title">Enroll in New Courses</h4>
                    <div id="availableCoursesList" class="row">
                        <!-- Available courses for enrollment will be loaded here -->
                                <% if(available_courses.length == 0){ %>
                                    <div class="col-12 text-center text-muted py-4">All available courses have been enrolled!</div> 
                                <% } else{ %>
                                <% available_courses.forEach(course=>{ %>
                                <div class = "col-lg-6 col-md-12 mb-4">
                                <div class="course-item">
                                    <div class="course-item-info">
                                        <h5><%= course.course_name%></h5>
                                        <p><%= course.teacher_name %></p>
                                    </div>
                                        <form id="edit-form" class = "inner-form" method="post" action="/student/enroll">
                                            <input type="hidden" name="student_email" value = <%= student_user.email %> >
                                            <input type= "hidden" name="course" value='<%= JSON.stringify(course) %>' >
                                            <button class="upload-button" type="submit"> Enroll </button>
                                        </form>
                                    </div>
                                </div>
                            <% });} %>
                    </div>
                </div>
            </section>

            <!-- Course Detail Section (Hidden by default, shown when a course is clicked) -->
            <section id="courseDetailSection" style="display:none;">
                <div class="info-card mb-4">
                    <h4 class="card-title" id="courseDetailTitle"></h4>
                    <p class="text-muted" id="courseTeacherName"></p>
                    <div class="d-flex align-items-center mb-4 mt-3">
                        <span class="me-4 fs-5 fw-bold text-muted">Attendance:</span>
                        <div class="progress-circle">
                            <div class="bar"></div>
                            <div class="fill"></div>
                            <div class="inner-circle" id="courseAttendancePercentage">0%</div>
                        </div>
                    </div>
                    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="pills-notifications-tab" data-bs-toggle="pill" data-bs-target="#pills-notifications" type="button" role="tab" aria-controls="pills-notifications" aria-selected="true">Notifications</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="pills-submissions-tab" data-bs-toggle="pill" data-bs-target="#pills-submissions" type="button" role="tab" aria-controls="pills-submissions" aria-selected="false">Submissions</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="pills-marks-tab" data-bs-toggle="pill" data-bs-target="#pills-marks" type="button" role="tab" aria-controls="pills-marks" aria-selected="false">Marks</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="pills-tabContent">
                        <div class="tab-pane fade show active" id="pills-notifications" role="tabpanel" aria-labelledby="pills-notifications-tab">
                            <div id="notificationsBox">
                                <!-- Notifications will be loaded here -->
                                <p class="text-muted text-center py-3" id="noNotificationsMessage">No new notifications for this course.</p>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="pills-submissions" role="tabpanel" aria-labelledby="pills-submissions-tab">
                            <div id="submissionsBox">
                                <h5 class="mb-4 text-center text-muted">Past Submissions</h5>
                                <div id="pastSubmissionsList" class="mb-4">
                                    <!-- Past submissions will be loaded here -->
                                    <p class="text-muted text-center py-3" id="noPastSubmissionsMessage">No past submissions for this course.</p>
                                </div>

                                <div class="submission-card">
                                    <h5 class="card-title">Submit New Assignment</h5>
                                    <div class="file-upload-section mb-3">
                                        <i class="fas fa-file-pdf file-icon mb-2"></i>
                                        <p class="text-muted" id="selectedFileName">Drag & drop your PDF here, or</p>
                                        <input type="file" id="pdfFileInput" accept=".pdf">
                                        <label for="pdfFileInput" class="btn btn-outline-primary fw-bold rounded-pill px-4">Browse Files</label>
                                    </div>
                                    <button id="submitPdfBtn" class="btn btn-success w-100 fw-bold py-2 rounded-pill" disabled>
                                        <i class="fas fa-upload me-2"></i> Submit PDF
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="pills-marks" role="tabpanel" aria-labelledby="pills-marks-tab">
                            <div id="marksBox">
                                <div class="table-responsive">
                                    <table class="table table-hover marks-table">
                                        <thead>
                                            <tr>
                                                <th>Category</th>
                                                <th>Score</th>
                                                <th>Max Score</th>
                                            </tr>
                                        </thead>
                                        <tbody id="marksTableBody">
                                            <!-- Marks will be loaded here -->
                                        </tbody>
                                    </table>
                                </div>
                                <p class="text-muted text-center py-3" id="noMarksMessage">No marks available for this course yet.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

        </main>
    </div>

    <!-- Custom Alert Container -->
    <div id="customAlert" class="py-2 px-4 shadow-lg rounded-pill" style="display: none;"></div>

    <!-- Bootstrap JS (Popper.js and Bootstrap JS) -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" xintegrity="sha384-I7E8VVD/ismYTFyMGUHv+zmBCEvFETvRoYxfEKdI3uD/goUwwyYkfdkjJmrFwFZV" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" xintegrity="sha384-0pUGZvbkm6XF6gxjEnlcoJoZ/z4YVEo7NsDz+EEFpW/rK7sFfFV7FD5uU" crossorigin="anonymous"></script>

    <!-- Custom JavaScript -->
    <script>
        // Sample Data (can be replaced with API calls in a real application)
        const student = {
            name: "Jane Doe",
            roll: "2021-045"
        };

        
        let currentSelectedCourseId = null; // To keep track of the currently viewed course

        // DOM Elements
      
        const mainHeaderElem = document.getElementById('mainHeader');
        const totalEnrolledCoursesElem = document.getElementById('totalEnrolledCourses');
        const enrolledCoursesListElem = document.getElementById('enrolledCoursesList');
        const availableCoursesListElem = document.getElementById('availableCoursesList');
        const noCoursesMessage = document.getElementById('noCoursesMessage');


        const courseDetailTitle = document.getElementById('courseDetailTitle');
        const courseTeacherName = document.getElementById('courseTeacherName');
        const courseAttendancePercentageElem = document.getElementById('courseAttendancePercentage');
        const notificationsBox = document.getElementById('notificationsBox');
        const noNotificationsMessage = document.getElementById('noNotificationsMessage');
        const marksTableBody = document.getElementById('marksTableBody');
        const noMarksMessage = document.getElementById('noMarksMessage');

        // Submission specific elements
        const submissionsBox = document.getElementById('submissionsBox');
        const pastSubmissionsList = document.getElementById('pastSubmissionsList');
        const noPastSubmissionsMessage = document.getElementById('noPastSubmissionsMessage');
        const pdfFileInput = document.getElementById('pdfFileInput');
        const selectedFileName = document.getElementById('selectedFileName');
        const submitPdfBtn = document.getElementById('submitPdfBtn');
        const customAlert = document.getElementById('customAlert');


        document.addEventListener('DOMContentLoaded', () => {
            renderStudentProfile();
            renderEnrolledCourses();
            renderAvailableCourses();
            updateTotalEnrolledCourses();
        });

        // --- Core Functions ---

        function renderStudentProfile(){
            const picButton = document.getElementById('picButton');
            const picForm = document.getElementById('picForm');
            const picSubmit = document.getElementById('picSubmit')
            picButton.addEventListener('click', () => {
                picForm.style.display = 'block';
                picButton.style.display = 'none';
            });
            picSubmit.addEventListener('submit', async (event) => {
                event.preventDefault();
                picForm.style.display = 'none';
                picButton.style.display = 'block'
            });
        }

        function renderEnrolledCourses() {
            const courseDetailSection = document.getElementById('courseDetailSection');
            const dashboardSection = document.getElementById('dashboard-section');
            const courseItems = document.querySelectorAll('.item-course');
            const dashboard = document.getElementById('dashboard');
            const enrollment = document.getElementById("enrollment");

            courseItems.forEach(courseItem => {
                courseItem.addEventListener('click', () => {
                    dashboardSection.style.display = 'none'; 
                    courseDetailSection.style.display = 'block';
                });
            });
            dashboard.addEventListener('click', ()=>{
                dashboardSection.style.display = 'block'; 
                courseDetailSection.style.display = 'none';
            });
            enrollment.addEventListener('click', ()=>{
                dashboardSection.style.display = 'block';
                courseDetailSection.style.display = 'none';
                enrollmentSection.style.display = 'block';
                enrolledCourse.style.display = 'none';
                enrollment.classList.add('active');
                dashboard.classList.remove('active');
            });
        }

        function renderAvailableCourses() {
            const enrollmentSection = document.getElementById('enrollment-section');
            const enrollment = document.getElementById("enrollment");
            const enrolledCourse = document.getElementById('enrolled-course');
            const dashboard = document.getElementById('dashboard');

            enrollment.addEventListener('click', ()=>{
                enrollmentSection.style.display = 'block';
                enrolledCourse.style.display = 'none';
                enrollment.classList.add('active');
                dashboard.classList.remove('active');

            });

            dashboard.addEventListener('click', ()=>{
                enrollmentSection.style.display = 'none';
                enrolledCourse.style.display = 'block';
                dashboard.classList.add('active');
                enrollment.classList.remove('active');

            });
        }

        

        function displayCourseDetails(courseId) {
            currentSelectedCourseId = courseId; // Set the current course ID
            const course = allCourses.find(c => c.id === courseId);
            if (!course) {
                console.error('Course not found:', courseId);
                return;
            }

            // Update header and active course item
            mainHeaderElem.textContent = `Course: ${course.name}`;
            document.querySelectorAll('.course-item').forEach(item => item.classList.remove('active'));
            document.querySelector(`.course-item[data-course-id="${courseId}"]`)?.classList.add('active');


            courseDetailTitle.textContent = course.name;
            courseTeacherName.textContent = `Teacher: ${course.teacher}`;

            // Update attendance progress
            setAttendanceProgress(courseAttendancePercentageElem.closest('.progress-circle'), course.attendance);
            courseAttendancePercentageElem.textContent = `${course.attendance}%`;


            // Render notifications
            renderNotifications(course);
            // Render submissions
            renderSubmissions(course);
            // Render marks
            renderMarks(course);

            // Show course detail section and hide others
            showSection('courseDetailSection');
        }

        function renderNotifications(course) {
            notificationsBox.innerHTML = ''; // Clear previous
            if (course.notifications && course.notifications.length > 0) {
                noNotificationsMessage.style.display = 'none';
                course.notifications.forEach(notif => {
                    const notifItem = document.createElement('div');
                    notifItem.className = 'notification-item';

                    let attachmentHtml = '';
                    if (notif.attachmentUrl) {
                        // Added target="_blank" for new tab and download attribute for direct download
                        attachmentHtml = `
                            <a href="${notif.attachmentUrl}" class="notification-attachment" target="_blank" download>
                                <i class="fas fa-file-pdf"></i>
                                <span class="sr-only">Download PDF</span>
                            </a>
                        `;
                    }

                    notifItem.innerHTML = `
                        <div class="notification-item-content">
                            <span class="date">${new Date(notif.date).toLocaleDateString()}</span>
                            <p class="message">${notif.message}</p>
                        </div>
                        ${attachmentHtml}
                    `;
                    notificationsBox.appendChild(notifItem);
                });
            } else {
                noNotificationsMessage.style.display = 'block';
            }
        }

        function renderSubmissions(course) {
            pastSubmissionsList.innerHTML = ''; // Clear previous
            if (course.submissions && course.submissions.length > 0) {
                noPastSubmissionsMessage.style.display = 'none';
                course.submissions.forEach(submission => {
                    const submissionItem = document.createElement('div');
                    submissionItem.className = 'submission-card d-flex justify-content-between align-items-center';
                    submissionItem.innerHTML = `
                        <div>
                            <h6>${submission.assignmentName}</h6>
                            <p class="text-muted mb-1">Submitted: ${new Date(submission.submissionDate).toLocaleDateString()} - ${submission.fileName}</p>
                        </div>
                        <span class="badge status-badge ${submission.status.toLowerCase()}">${submission.status}</span>
                    `;
                    pastSubmissionsList.appendChild(submissionItem);
                });
            } else {
                noPastSubmissionsMessage.style.display = 'block';
            }
            // Reset file input and button state for new submission
            pdfFileInput.value = '';
            selectedFileName.textContent = 'Drag & drop your PDF here, or';
            submitPdfBtn.disabled = true;
        }

        function renderMarks(course) {
            marksTableBody.innerHTML = ''; // Clear previous
            if (course.marks && course.marks.length > 0) {
                noMarksMessage.style.display = 'none';
                course.marks.forEach(mark => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${mark.category}</td>
                        <td>${mark.score}</td>
                        <td>${mark.max}</td>
                    `;
                    marksTableBody.appendChild(row);
                });
            } else {
                noMarksMessage.style.display = 'block';
            }
        }


        // --- UI Navigation ---
        document.querySelectorAll('.sidebar .menu-item').forEach(item => {
            item.addEventListener('click', (event) => {
                event.preventDefault();
                const sectionId = event.currentTarget.dataset.section;
                showSection(sectionId);

                // Update active state in sidebar
                document.querySelectorAll('.sidebar .menu-item').forEach(menuItem => {
                    menuItem.classList.remove('active');
                });
                event.currentTarget.classList.add('active');
            });
        });

        function showSection(sectionId) {
            dashboardSection.style.display = 'none';
            enrollmentSection.style.display = 'none';
            courseDetailSection.style.display = 'none';

            let headerText = "Dashboard Overview"; // Default header

            switch (sectionId) {
                case 'dashboard':
                    dashboardSection.style.display = 'block';
                    headerText = "Dashboard Overview";
                    break;
                case 'enrollment':
                    enrollmentSection.style.display = 'block';
                    headerText = "Course Enrollment";
                    break;
                case 'courseDetailSection':
                    courseDetailSection.style.display = 'block';
                    // Header for course detail is set dynamically by displayCourseDetails
                    break;
            }
            if (sectionId !== 'courseDetailSection') { // Only update if not navigating to course details
                 mainHeaderElem.textContent = headerText;
            }

            // Remove active class from course items if navigating away from course detail
            if (sectionId !== 'courseDetailSection') {
                document.querySelectorAll('.course-item').forEach(item => item.classList.remove('active'));
            }
        }


        // --- Helper for Attendance Progress Circle ---
        function setAttendanceProgress(circleElement, percent) {
            const bar = circleElement.querySelector('.bar');
            const fill = circleElement.querySelector('.fill');

            // Reset classes and transforms to ensure correct behavior on subsequent calls
            bar.classList.remove('over50');
            bar.style.transform = '';
            fill.style.transform = '';

            const rotationDegrees = (percent / 100) * 360;

            if (percent <= 50) {
                // For 0-50%, only the right half (fill) rotates
                // The 'bar' (right half) starts at 0 rotation, its content is visible behind the 'fill'
                fill.style.transform = `rotate(${rotationDegrees}deg)`;
            } else {
                // For >50%, both halves are involved
                // The 'bar' (right half) is set to appear as a full half circle (180deg)
                bar.classList.add('over50'); // This class will change its clip property
                // The 'fill' (left half) rotates from 0 up to (percentage - 50%) * 3.6
                const over50Percent = percent - 50;
                fill.style.transform = `rotate(${over50Percent * 3.6}deg)`;
            }
        }


        // --- Custom Alert/Message Box Function ---
        function alertMessage(message, type = 'info') {
            customAlert.textContent = message;
            customAlert.className = `py-2 px-4 shadow-lg rounded-pill`; // Reset classes
            customAlert.classList.add(type); // Add type class for styling (e.g., 'success', 'error')
            customAlert.style.display = 'block';

            setTimeout(() => {
                customAlert.style.display = 'none';
            }, 4000); // Hide after 4 seconds
        }

        // --- Submission Feature Logic ---
        pdfFileInput.addEventListener('change', (event) => {
            if (event.target.files.length > 0) {
                const file = event.target.files[0];
                if (file.type === 'application/pdf') {
                    selectedFileName.textContent = `Selected: ${file.name}`;
                    submitPdfBtn.disabled = false;
                } else {
                    selectedFileName.textContent = 'Please select a PDF file.';
                    submitPdfBtn.disabled = true;
                    alertMessage('Only PDF files are allowed.', 'error');
                }
            } else {
                selectedFileName.textContent = 'Drag & drop your PDF here, or';
                submitPdfBtn.disabled = true;
            }
        });

        submitPdfBtn.addEventListener('click', () => {
            const file = pdfFileInput.files[0];
            if (file && currentSelectedCourseId) {
                // Simulate file upload
                const course = allCourses.find(c => c.id === currentSelectedCourseId);
                if (course) {
                    const newSubmission = {
                        id: `sub${Date.now()}`, // Unique ID
                        assignmentName: `New Assignment (${file.name.split('.')[0]})`, // Derive name from file
                        submissionDate: new Date().toISOString().split('T')[0], // Current date
                        status: 'Submitted',
                        fileName: file.name
                    };
                    course.submissions.push(newSubmission);
                    renderSubmissions(course); // Re-render submissions for the current course
                    alertMessage('File submitted successfully!', 'success');
                    pdfFileInput.value = ''; // Clear file input
                    selectedFileName.textContent = 'Drag & drop your PDF here, or';
                    submitPdfBtn.disabled = true;
                } else {
                    alertMessage('Could not find the course to submit to.', 'error');
                }
            } else {
                alertMessage('No file selected or course not identified.', 'error');
            }
        });

    </script>
</body>
</html>