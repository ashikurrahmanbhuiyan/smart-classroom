<!DOCTYPE html>
<head>
    <title>Smart Class - Resources</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="course_pages_navbar.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        xintegrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .body {
            font-family: 'Inter', sans-serif;
            margin: 20px;
        }
        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
    </style>
</head>

<body class="bg-gray-100 text-gray-800">

    <div class="flex h-screen">

        <%- include('navbar.ejs') %>

        <main class="flex-1 p-8 overflow-y-auto">

            <div class="bg-gray-100 container mx-auto p-4 sm:p-6 lg:p-8">
                <!-- Header Section -->
                <header class="mb-8">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Class Resources</h1>
                    <p class="text-gray-600 mt-2">Manage and share learning materials with students.</p>
                </header>

                <!-- Controls: Search, Filter, and Add New -->
                <div class="flex flex-col md:flex-row items-center justify-between mb-6 gap-4">
                    <div class="w-full md:w-1/2 lg:w-1/3">
                        <div class="relative">
                            <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                                <i class="fas fa-search text-gray-400"></i>
                            </span>
                            <input id="searchInput" type="text" placeholder="Search by resource name..."
                                class="w-full pl-10 pr-4 py-2 border rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        </div>
                    </div>
                    <div class="flex items-center gap-4">
                        <div class="flex items-center space-x-2 bg-white p-1 rounded-lg border">
                            <button onclick="filterResources('all')"
                                class="filter-btn active px-4 py-1.5 text-sm font-medium rounded-md bg-indigo-600 text-white">All</button>
                            <button onclick="filterResources('pdf')"
                                class="filter-btn px-4 py-1.5 text-sm font-medium rounded-md text-gray-600 hover:bg-gray-200">PDFs</button>
                            <button onclick="filterResources('video')"
                                class="filter-btn px-4 py-1.5 text-sm font-medium rounded-md text-gray-600 hover:bg-gray-200">Videos</button>
                            <button onclick="filterResources('link')"
                                class="filter-btn px-4 py-1.5 text-sm font-medium rounded-md text-gray-600 hover:bg-gray-200">Links</button>
                        </div>
                        <button id="addResourceBtn"
                            class="bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 transition duration-300 flex items-center gap-2">
                            <i class="fas fa-plus"></i>
                            <span>Add New</span>
                        </button>
                    </div>
                </div>

                <!-- Resources Grid -->
                <div id="resourceGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    <!-- Resource cards will be dynamically inserted here from JavaScript -->
                </div>
                <div id="noResultsMessage" class="hidden text-center py-12">
                    <i class="fas fa-folder-open text-4xl text-gray-400 mb-4"></i>
                    <p class="text-gray-500">No resources found. Try adjusting your search or filter.</p>
                </div>
            </div>

            <!-- Add New Resource Modal -->
            <div id="addResourceModal" class="fixed inset-0 z-50 flex items-center justify-center modal-backdrop hidden">
                <div
                    class="modal bg-white rounded-lg shadow-2xl w-11/12 md:max-w-md mx-auto opacity-0 transform -translate-y-10">
                    <div class="p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-2xl font-bold">Add New Resource</h2>
                            <button id="closeModalBtn" class="text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
                        </div>
                        <form id="addResourceForm">
                            <div class="mb-4">
                                <label for="resourceTitle" class="block text-sm font-medium text-gray-700 mb-1">Resource
                                    Title</label>
                                <input type="text" id="resourceTitle" name="resourceTitle"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                    required>
                            </div>
                            <div class="mb-4">
                                <label for="resourceDescription"
                                    class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                <textarea id="resourceDescription" name="resourceDescription" rows="3"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>
                            </div>
                            <div class="mb-4">
                                <label for="resourceType" class="block text-sm font-medium text-gray-700 mb-1">Resource
                                    Type</label>
                                <select id="resourceType" name="resourceType"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                    <option value="pdf">File </option>
                                    <option value="link">Link</option>
                                    <option value="video">Video (URL)</option>
                                </select>
                            </div>
                            <div id="fileInputContainer" class="mb-4">
                                <label for="resourceFile" class="block text-sm font-medium text-gray-700 mb-1">Upload
                                    File</label>
                                <input type="file" id="resourceFile" name="resourceFile"
                                    class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-600 hover:file:bg-indigo-100">
                            </div>
                            <div id="urlInputContainer" class="mb-4 hidden">
                                <label for="resourceUrl" class="block text-sm font-medium text-gray-700 mb-1">URL</label>
                                <input type="url" id="resourceUrl" name="resourceUrl"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                    placeholder="https://example.com">
                            </div>
                            <div class="flex justify-end space-x-3">
                                <button type="button" id="cancelBtn"
                                    class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">Cancel</button>
                                <button type="submit"
                                    class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">Add
                                    Resource</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Custom Alert/Confirm Modal -->
    <div id="customAlertModal" class="fixed inset-0 z-50 flex items-center justify-center modal-backdrop hidden">
        <div
            class="modal bg-white rounded-lg shadow-2xl w-11/12 md:max-w-sm mx-auto opacity-0 transform -translate-y-10 p-6">
            <h3 id="alertTitle" class="text-lg font-bold mb-4">Alert</h3>
            <p id="alertMessage" class="text-gray-700 mb-6">Message goes here.</p>
            <div id="alertButtons" class="flex justify-end space-x-3"></div>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const resourceGrid = document.getElementById('resourceGrid');
            const noResultsMessage = document.getElementById('noResultsMessage');
            const searchInput = document.getElementById('searchInput');

            // --- DYNAMICALLY CREATE RESOURCE CARD ---
            const createResourceCard = (resource) => {
                const typeDetails = {
                    pdf: { icon: 'fa-file-pdf', color: 'red' },
                    video: { icon: 'fa-video', color: 'blue' },
                    link: { icon: 'fa-link', color: 'green' }
                };

                const card = document.createElement('div');
                card.className = 'resource-card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300 trasition-all transform hover:scale-110';
                card.dataset.type = resource.type;
                card.dataset.name = resource.title;
                card.dataset.id = resource._id;

                card.innerHTML = `
                    <div class="p-5">
                        <div class="flex items-center gap-4 mb-3">
                            <div class="bg-${typeDetails[resource.type].color}-100 p-3 rounded-full">
                                <i class="fas ${typeDetails[resource.type].icon} text-${typeDetails[resource.type].color}-500 text-2xl"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold text-lg">${resource.title}</h3>
                                <p class="text-sm text-gray-500">Uploaded: ${resource.uploadDate}</p>
                            </div>
                        </div>
                        <p class="text-gray-600 text-sm mb-4">${resource.description}</p>
                        <div class="flex justify-end space-x-2">
                            <button class="text-sm text-indigo-600 hover:underline view-btn">View</button>
                            <button class="text-sm text-green-600 hover:underline download-btn">Download</button>
                            <button class="text-sm text-red-600 hover:underline delete-btn">Delete</button>
                        </div>
                    </div>
                `;
                resourceGrid.appendChild(card);
            };

            // --- FETCH AND RENDER RESOURCES FROM THE SERVER ---
            const fetchAndRenderResources = () => {
                resourceGrid.innerHTML = ''; // Clear existing
                fetch('resource_sharing/resources')
                    .then(response => response.json())
                    .then(resources => {
                        resources.forEach(createResourceCard);
                    })
                    .catch(error => {
                        console.error("Failed to fetch resources:", error);
                    });
                initialResources.forEach(createResourceCard);
            };

            // --- ADD NEW RESOURCE FORM SUBMISSION ---
            const addResourceForm = document.getElementById('addResourceForm');
            addResourceForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                const formData = new FormData(addResourceForm);
                const newResourceData = {
                    title: formData.get('resourceTitle'),
                    description: formData.get('resourceDescription'),
                    type: formData.get('resourceType'),
                    url: formData.get('resourceUrl'), // Will be null if not a link/video
                    // The file from formData.get('resourceFile') would be handled by the server
                };

                console.log("Sending data to server:", newResourceData);

                // --- SIMULATING API CALL ---
                // This block simulates sending data to your backend and getting a response.
                //  fetch call to your '/api/resources' endpoint.
                try {
                    const response = await fetch('resource_sharing/saveResources/', {
                        method: 'POST',
                        body: formData // Send the whole form data
                    });
                    if (!response.ok) throw new Error('Server responded with an error!');
                    const savedResource = await response.json();

                    // --- MOCK RESPONSE (for demo purposes) ---
                    // const savedResource = {
                    //     ...newResourceData,
                    //     _id: Date.now().toString(), // Fake DB ID
                    //     uploadDate: new Date().toISOString().split('T')[0]
                    // };
                    // --- END MOCK ---

                    createResourceCard(savedResource);
                    showAppAlert('Success!', 'New resource added successfully!');
                    closeModal(addResourceModal, addModal);
                    addResourceForm.reset();
                    resourceTypeSelect.dispatchEvent(new Event('change'));

                } catch (error) {
                    console.error("Failed to add resource:", error);
                    showAppAlert('Error!', 'Failed to add the resource. Please try again.');
                }
            });


            // --- ALL OTHER MODAL, ALERT, and FILTER LOGIC ---
            const addResourceModal = document.getElementById('addResourceModal');
            const addResourceBtn = document.getElementById('addResourceBtn');
            const closeModalBtn = document.getElementById('closeModalBtn');
            const cancelBtn = document.getElementById('cancelBtn');
            const addModal = addResourceModal.querySelector('.modal');
            const resourceTypeSelect = document.getElementById('resourceType');
            const fileInputContainer = document.getElementById('fileInputContainer');
            const urlInputContainer = document.getElementById('urlInputContainer');
            const customAlertModal = document.getElementById('customAlertModal');
            const alertModal = customAlertModal.querySelector('.modal');
            const alertTitle = document.getElementById('alertTitle');
            const alertMessage = document.getElementById('alertMessage');
            const alertButtons = document.getElementById('alertButtons');
            let confirmCallback = null;

            const openModal = (modalEl, innerModal) => {
                modalEl.classList.remove('hidden');
                setTimeout(() => { innerModal.classList.remove('opacity-0', '-translate-y-10'); }, 10);
            };
            const closeModal = (modalEl, innerModal) => {
                innerModal.classList.add('opacity-0', '-translate-y-10');
                setTimeout(() => { modalEl.classList.add('hidden'); }, 300);
            };
            addResourceBtn.addEventListener('click', () => openModal(addResourceModal, addModal));
            closeModalBtn.addEventListener('click', () => closeModal(addResourceModal, addModal));
            cancelBtn.addEventListener('click', () => closeModal(addResourceModal, addModal));
            resourceTypeSelect.addEventListener('change', () => {
                const isFile = resourceTypeSelect.value === 'pdf'; // Assuming pdf is the only file type for now
                fileInputContainer.classList.toggle('hidden', !isFile);
                urlInputContainer.classList.toggle('hidden', isFile);
            });
            const showAppAlert = (title, message) => {
                alertTitle.textContent = title;
                alertMessage.textContent = message;
                alertButtons.innerHTML = `<button id="alertOkBtn" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">OK</button>`;
                openModal(customAlertModal, alertModal);
                document.getElementById('alertOkBtn').addEventListener('click', () => closeModal(customAlertModal, alertModal));
            };
            const showAppConfirm = (title, message, callback) => {
                alertTitle.textContent = title;
                alertMessage.textContent = message;
                confirmCallback = callback;
                alertButtons.innerHTML = `<button id="confirmCancelBtn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">Cancel</button><button id="confirmOkBtn" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">Confirm</button>`;
                openModal(customAlertModal, alertModal);
                document.getElementById('confirmCancelBtn').addEventListener('click', () => closeModal(customAlertModal, alertModal));
                document.getElementById('confirmOkBtn').addEventListener('click', () => {
                    closeModal(customAlertModal, alertModal);
                    if (confirmCallback) confirmCallback(true);
                });
            };
            const performSearchAndFilter = () => {
                const searchTerm = searchInput.value.toLowerCase();
                const activeFilter = document.querySelector('.filter-btn.active').dataset.filter || 'all';
                const resourceCards = resourceGrid.querySelectorAll('.resource-card');
                let resultsFound = false;
                resourceCards.forEach(card => {
                    const name = card.dataset.name.toLowerCase();
                    const type = card.dataset.type;
                    const matchesSearch = name.includes(searchTerm);
                    const matchesFilter = activeFilter === 'all' || type === activeFilter;
                    if (matchesSearch && matchesFilter) {
                        card.classList.remove('hidden');
                        resultsFound = true;
                    } else {
                        card.classList.add('hidden');
                    }
                });
                noResultsMessage.classList.toggle('hidden', resultsFound || resourceGrid.children.length === 0);
            };
            searchInput.addEventListener('input', performSearchAndFilter);
            window.filterResources = (type) => {
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.classList.remove('active', 'bg-indigo-600', 'text-white');
                    btn.classList.add('text-gray-600', 'hover:bg-gray-200');
                });
                const selectedBtn = document.querySelector(`.filter-btn[onclick="filterResources('${type}')"]`);
                selectedBtn.classList.add('active', 'bg-indigo-600', 'text-white');
                selectedBtn.classList.remove('text-gray-600', 'hover:bg-gray-200');
                selectedBtn.dataset.filter = type;
                performSearchAndFilter();
            };
            document.querySelector('.filter-btn.active').dataset.filter = 'all';
            resourceGrid.addEventListener('click', (event) => {
                const target = event.target;
                const card = target.closest('.resource-card');
                if (!card) return;
                if (target.classList.contains('delete-btn')) {
                    showAppConfirm('Delete Resource', 'Are you sure you want to delete this resource?', (confirmed) => {
                        if (confirmed) {
                            // In a real app: fetch(`/api/resources/${card.dataset.id}`, { method: 'DELETE' })
                            card.style.transition = 'opacity 0.5s, transform 0.5s';
                            card.style.opacity = '0';
                            card.style.transform = 'scale(0.9)';
                            setTimeout(() => { card.remove(); performSearchAndFilter(); }, 500);
                        }
                    });
                }
                if (target.classList.contains('view-btn')) { showAppAlert('View Resource', 'This would open the resource in a new tab or a viewer.'); }
                if (target.classList.contains('download-btn')) { showAppAlert('Download Resource', 'This would start a file download.'); }
            });

            // Initial Load
            fetchAndRenderResources();
        });
    </script>
</body>

</html>